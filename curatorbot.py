import time
import telebot
from datetime import date
import threading
import schedule
import curatorbase
from calendar_client import ggl

bot = telebot.TeleBot("")

calendar_actual = []
calendar_status0 = []
calendar_status1 = []


def get_actual_calendars():
    all_from_api = ggl.evenets_list()
    actual_date = str(date.today())
    for a in all_from_api:
        if a.get("–î–∞—Ç–∞ —Å–æ–±—ã—Ç–∏—è") == actual_date:
            calendar_actual.append(a)


def announcement(calendar_actual):
    db_groups = curatorbase.get_groups()
    for a in calendar_actual:
        for b in db_groups:
            try:
                api_name_index = a.get("–ù–∞–∑–≤–∞–Ω–∏–µ").index(",")
                api_name = a.get("–ù–∞–∑–≤–∞–Ω–∏–µ")[0:api_name_index]
                if api_name == b[0]:
                    group_id = b[1]
                    lesson_num = a.get("–ù–∞–∑–≤–∞–Ω–∏–µ")[api_name_index+1:]
                    speaker_and_lesson_name = a.get("–û–ø–∏—Å–∞–Ω–∏–µ")
                    lesson_time = a.get("–í—Ä–µ–º—è —Å–æ–±—ã—Ç–∏—è")

                    bot.send_message(group_id, f"–†–µ–±—è—Ç, –≤—Å–µ–º –ø—Ä–∏–≤–µ—Çüëã\n\n"
                                               f"üìö–ë–ª–æ–∫ {api_name}\n"
                                               f"{lesson_num} –≤ {lesson_time}\n"
                                               f"{speaker_and_lesson_name}\n\n"
                                               f"–ü–æ–ª–µ—Ç–µ–ª–∏üöÄ –∂–¥—ë–º –≤—Å–µ—Ö –±–µ–∑ –æ–ø–æ–∑–¥–∞–Ω–∏–π")
                    calendar_status1.append([api_name, group_id])
            except:
                if a not in calendar_status0:
                    calendar_status0.append(a)
                    bot.send_message(305896408, f"–ê–Ω–æ–Ω—Å –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω: {calendar_status0}")


def feedback(calendar_status1):
    for groups in calendar_status1:
        try:
            group_id = groups[1]
            bot.send_message(group_id, "–î–æ–±—Ä—ã–π –≤–µ—á–µ—Ä —Ä–µ–±—è—Ç üëã\n"
                                       "–£–¥–µ–ª–∏—Ç–µ 2 –º–∏–Ω—É—Ç—ã –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ü§ç \n\n"
                                       "https://forms.gle/Z45pmgdUFmdWdPbY9")
        except:
            bot.send_message(305896408, f"–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞: {groups}")
    calendar_status1.clear()
    calendar_status0.clear()


schedule.every().day.at("18:26").do(get_actual_calendars)
schedule.every().day.at("18:27").do(announcement, calendar_actual=calendar_actual)
schedule.every().day.at("18:28").do(feedback, calendar_status1=calendar_status1)


def all_schedules():
    while True:
        schedule.run_pending()
        time.sleep(1)



@bot.channel_post_handler()
def channel(message):
    channel_id = message.chat.id
    channel_name = message.chat.title
    add_to_base = curatorbase.add_group(channel_name, channel_id)
    if add_to_base == True:
        bot.send_message(305896408, f'{channel_name} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É')


schedules_treading = threading.Thread(target=all_schedules)

schedules_treading.start()

bot.polling()

# –µ—Å–ª–∏ –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø—É
# @bot.message_handler(content_types=['new_chat_members'])
# def add_group_to_base(message):
#     new_member_id = message.json.get("new_chat_participant").get("id")
#     if new_member_id == 6605946285:
#         group_id = message.chat.id
#         group_name = message.chat.title
#         add_to_base = curatorbase.add_group(group_name, group_id)
#         bot.send_message(message.chat.id, f'{add_to_base}')
